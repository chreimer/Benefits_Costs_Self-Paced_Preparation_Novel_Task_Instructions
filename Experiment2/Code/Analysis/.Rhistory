TIPI_scores = TIPI_Exp2_new %>%
group_by(participant) %>%
summarise(TIPI_score = mean(resp_r))
# combine TIPI score and prepRT
prepRT2_cor$TIPI_score = TIPI_scores$TIPI_score
View(prepRT2_cor)
# check that each participant has 20 UPPSP responses
p_no_uppsp = table(UPPSP_Exp2$participant)
#p_no_uppsp
# calculate UPPSP score for each participant for each factor
# perseverance
UPPSP_Exp2_perseverance = UPPSP_Exp2 %>%
filter(factor == "Perseverance")
UPPSP_Exp2_perseverance$resp = as.numeric(as.character(UPPSP_Exp2_perseverance$resp))
UPPSP_Exp2_perseverance_score = UPPSP_Exp2_perseverance %>%
group_by(participant) %>%
summarise(Perseverance_Score = mean(resp))
# premeditation
UPPSP_Exp2_premeditation = UPPSP_Exp2 %>%
filter(factor == "Premeditation")
UPPSP_Exp2_premeditation$resp = as.numeric(as.character(UPPSP_Exp2_premeditation$resp))
UPPSP_Exp2_premeditation_score = UPPSP_Exp2_premeditation %>%
group_by(participant) %>%
summarise(Premeditation_Score = mean(resp))
# positive urgency
UPPSP_Exp2_posurgency = UPPSP_Exp2 %>%
filter(factor == "Positive Urgency")
UPPSP_Exp2_posurgency$resp = as.numeric(as.character(UPPSP_Exp2_posurgency$resp))
# reverse coding positive urgency
UPPSP_Exp2_posurgency = UPPSP_Exp2_posurgency %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 5 - resp)
UPPSP_Exp2_posurgency_score = UPPSP_Exp2_posurgency %>%
group_by(participant) %>%
summarise(PosUrgency_Score = mean(resp_r))
# negative urgency
UPPSP_Exp2_negurgency = UPPSP_Exp2 %>%
filter(factor == "Negative Urgency")
UPPSP_Exp2_negurgency$resp = as.numeric(as.character(UPPSP_Exp2_negurgency$resp))
# reverse coding negative urgency
UPPSP_Exp2_negurgency = UPPSP_Exp2_negurgency %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 5 - resp)
UPPSP_Exp2_negurgency_score = UPPSP_Exp2_negurgency %>%
group_by(participant) %>%
summarise(NegUrgency_Score = mean(resp_r))
# sensation seeking
UPPSP_Exp2_senseek = UPPSP_Exp2 %>%
filter(factor == "Sensation Seeking")
UPPSP_Exp2_senseek$resp = as.numeric(as.character(UPPSP_Exp2_senseek$resp))
# reverse coding sensation seeking
UPPSP_Exp2_senseek = UPPSP_Exp2_senseek %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 5 - resp)
UPPSP_Exp2_senseek_score = UPPSP_Exp2_senseek %>%
group_by(participant) %>%
summarise(SenSeeking_Score = mean(resp_r))
# combine all UPPSP factors and prepRT
prepRT2_cor$Perseverance_Score = UPPSP_Exp2_perseverance_score$Perseverance_Score
prepRT2_cor$Premeditation_Score = UPPSP_Exp2_premeditation_score$Premeditation_Score
prepRT2_cor$PosUrgency_Score = UPPSP_Exp2_posurgency_score$PosUrgency_Score
prepRT2_cor$NegUrgency_Score = UPPSP_Exp2_negurgency_score$NegUrgency_Score
prepRT2_cor$SenSeeking_Score = UPPSP_Exp2_senseek_score$SenSeeking_Score
# save as csv
write.csv(prepRT2_cor, 'Exp2_prepRT_UPPSP', row.names = FALSE)
View(prepRT2_cor)
p_BHI = table(BHI_Exp2$participant)
p_BHI
BHI_Exp2$resp = as.numeric(as.character(BHI_Exp2$resp))
BHI_Q1 = BHI_Exp2 %>%
filter(qnumber == 1) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
BHI_Q2 = BHI_Exp2 %>%
filter(qnumber == 2) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 6 - resp)
BHI_Q3 = BHI_Exp2 %>%
filter(qnumber == 3) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
BHI_Q4 = BHI_Exp2 %>%
filter(qnumber == 4) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 6 - resp)
BHI_Exp2_new = rbind(BHI_Q1, BHI_Q2, BHI_Q3, BHI_Q4)
# calculate BHI score (the average of all items)
BHI_scores = BHI_Exp2_new %>%
group_by(participant) %>%
summarise(BHI_score = mean(resp_r))
# combine BHI score and prepRT
prepRT2_cor$BHI_score = BHI_scores$BHI_score
knitr::opts_chunk$set(echo = FALSE)
library(afex)
library(BayesFactor)
library(car)
library(cowplot)
library(DataCombine)
library(data.table)
library(extrafont)
library(ez)
library(ggpubr)
library(gridExtra)
library(knitr)
library(tidyverse)
# clear directory
rm(list=ls())
# open files
input_Exp2 = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "CIA_Preparation_Exp2_*")
for (i in files) {
tmp <- read_csv(file = file.path("../../Data/Raw/", i), col_types = cols())
# add the files to the data frame
input_Exp2 = rbind (input_Exp2, tmp)
rm(tmp)
}
# select UPPSP data
UPPSP_Exp2 = input_Exp2 %>%
filter(factor %in% c("Perseverance", "Premeditation", "Positive Urgency", "Negative Urgency", "Sensation Seeking"))
# rename prolific_ID into participant
names(UPPSP_Exp2)[1] = "participant"
# select TIPI data
TIPI_Exp2 = input_Exp2 %>%
filter(factor == 'Conscientiousness_TIPI')
# rename prolific_ID into participant
names(TIPI_Exp2)[1] = "participant"
# select BHI data
BHI_Exp2 = input_Exp2 %>%
filter(factor == 'Conscientiousness_BHI')
# rename prolific_ID into participant
names(BHI_Exp2)[1] = "participant"
# convert some factor variables to numeric variables
input_Exp2$block_number = as.numeric(as.character(input_Exp2$block_number))
input_Exp2$prepRT = as.numeric(as.character(input_Exp2$prepRT))
input_Exp2$rt = as.numeric(as.character(input_Exp2$rt))
# add numeric equivalent for correct variable; correct = TRUE = 1, correct = FALSE = 0
input_Exp2 = input_Exp2 %>%
mutate(acc = correct)
input_Exp2$acc = as.integer(as.logical(input_Exp2$acc))
# filter questionnaire data for the analysis
input_Exp2 = input_Exp2 %>%
filter(block_number <= 96)
# block_type: rename 1 to 50%-image-alone, rename 0 to 100%-image-alone
input_Exp2$block_type[input_Exp2$block_type == "25"] = "25%-image-alone"
input_Exp2$block_type[input_Exp2$block_type == "75"] = "75%-image-alone"
# rename prolific_ID into participant
names(input_Exp2)[1] = "participant"
# demographics
demographics = input_Exp2 %>%
summarise(mean= mean(age),
sd= sd(age),
max = max(age),
min = min(age))
gender = input_Exp2 %>%
filter(block_number == "1") %>%
group_by(gender) %>%
count()
# remove outliers and calculate prepRT depending on condition
prepRT2 = input_Exp2 %>%
filter(prepRT > 100) %>%
filter(prepRT < 20000) %>%
filter(rt > 100) %>%
filter(rt < 3000) %>%
group_by(participant, block_type) %>%
summarise(prepRT = mean(prepRT))
prepRT2_GM = prepRT2 %>%
group_by(block_type) %>%
summarise(
prepRT = mean(prepRT))
kable(prepRT2_GM, caption = "PrepRT depending on condition", digits = 2)
# calculate removed trials in %
#100 - ((100/9984)*9728)
# z transform prepRT
prepRT2_cor = input_Exp2 %>%
filter(prepRT > 100) %>%
filter(prepRT < 20000) %>%
filter(rt > 100) %>%
filter(rt < 3000) %>%
filter(block_type == "75%-image-alone") %>%
group_by(participant) %>%
#mutate(prepRT_z = scale(prepRT, center = TRUE, scale = TRUE)) %>%
summarise(prepRT = mean(prepRT))
# pairwise comparisons including NHST and Bayes t-tests for PrepRT depending on condition
source("pairwise_comparisons.R") #pw
prepRT2_wide = prepRT2 %>%
dcast(participant ~ block_type, value.var = "prepRT")
prepRT2_wide_pw = TES(prepRT2_wide$`75%-image-alone`, prepRT2_wide$`25%-image-alone`, paired=TRUE)
row.names(prepRT2_wide_pw) = c('PrepRT')
kable(prepRT2_wide_pw, caption = "Paired-samples t-test on PrepRT", digits = 2)
# plot prepRT
level_order = c('75%-image-alone', '25%-image-alone')
plot_PrepRT2 = ggplot(prepRT2, aes(x = factor(block_type, level = level_order), y = prepRT)) +
geom_line(aes(group = participant), colour = "grey") +
geom_point() +
geom_boxplot(colour = "black", fill="grey", alpha = 0, width=0.1) +
scale_y_continuous(breaks = c(2000,4000,6000,8000,10000,12000,14000), limits = c(2000,14000)) +
stat_summary(fun.prepRT=mean, colour = "red", geom="line", aes(group=1))  +
stat_summary(fun.prepRT=mean, colour = "red", geom="point") +
stat_summary(fun.data = mean_cl_normal, colour = "red", width = 0.1, geom = "errorbar") +
xlab("Condition") +
ylab("Preparation RT (ms)") +
ggtitle("Preparation depending on condition") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(face = "plain", size = 14)) +
theme(axis.text = element_text(size = 14, color = "black")) +
theme(axis.title.x = element_text(face = "plain", size = 14)) +
theme(axis.title.x = element_text(margin = margin(t = 16, r = 0, b = 0, l = 00))) +
theme(axis.title.y = element_text(face = "plain", size = 14)) +
theme(axis.title.y = element_text(margin = margin(t = 0, r = 16, b = 0, l = 0))) +
theme(axis.ticks = element_line(size = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_PrepRT2
#ggsave("plot_PrepRT2.png", width = 24, height = 16, units = "cm")
### TIPI
# check number of participants and number of items across participants
p_TIPI = table(TIPI_Exp2$participant)
p_TIPI
TIPI_Exp2$resp = as.numeric(as.character(TIPI_Exp2$resp))
# reverse code TIPI question 2
TIPI_Exp2_q1 = TIPI_Exp2 %>%
filter(qnumber == 1) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
TIPI_Exp2_q2 = TIPI_Exp2 %>%
filter(qnumber == 2) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 8 - resp)
TIPI_Exp2_new = rbind(TIPI_Exp2_q1, TIPI_Exp2_q2)
# calculate TIPI score (the average of both items)
TIPI_scores = TIPI_Exp2_new %>%
group_by(participant) %>%
summarise(TIPI_score = mean(resp_r))
# combine TIPI score and prepRT
prepRT2_cor$TIPI_score = TIPI_scores$TIPI_score
### BHI
p_BHI = table(BHI_Exp2$participant)
p_BHI
BHI_Exp2$resp = as.numeric(as.character(BHI_Exp2$resp))
# reverse code BHI questions 2 and 4
BHI_Q1 = BHI_Exp2 %>%
filter(qnumber == 1) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
BHI_Q2 = BHI_Exp2 %>%
filter(qnumber == 2) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 6 - resp)
BHI_Q3 = BHI_Exp2 %>%
filter(qnumber == 3) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
BHI_Q4 = BHI_Exp2 %>%
filter(qnumber == 4) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 6 - resp)
BHI_Exp2_new = rbind(BHI_Q1, BHI_Q2, BHI_Q3, BHI_Q4)
# calculate BHI score (the average of all items)
BHI_scores = BHI_Exp2_new %>%
group_by(participant) %>%
summarise(BHI_score = mean(resp_r))
# combine BHI score and prepRT
prepRT2_cor$BHI_score = BHI_scores$BHI_score
# save as csv
write.csv(prepRT2_cor, 'Exp2_prepRT_TIPI_BHI', row.names = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(afex)
library(BayesFactor)
library(car)
library(cowplot)
library(DataCombine)
library(data.table)
library(extrafont)
library(ez)
library(ggpubr)
library(gridExtra)
library(knitr)
library(tidyverse)
# clear directory
rm(list=ls())
# open files
input_Exp3 = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "CIA_Preparation_Exp3_*")
for (i in files) {
tmp <- read_csv(file = file.path("../../Data/Raw/", i), col_types = cols())
# add the files to the data frame
input_Exp3 = rbind (input_Exp3, tmp)
rm(tmp)
}
# select UPPSP data
UPPSP_Exp3 = input_Exp3 %>%
filter(factor %in% c("Perseverance", "Premeditation", "Positive Urgency", "Negative Urgency", "Sensation Seeking"))
# rename prolific_ID into participant
names(UPPSP_Exp3)[1] = "participant"
# select TIPI data
TIPI_Exp3 = input_Exp3 %>%
filter(factor == 'Conscientiousness_TIPI')
# rename prolific_ID into participant
names(TIPI_Exp3)[1] = "participant"
# select BHI data
BHI_Exp3 = input_Exp3 %>%
filter(factor == 'Conscientiousness_BHI')
# rename prolific_ID into participant
names(BHI_Exp3)[1] = "participant"
# convert some factor variables to numeric variables
input_Exp3$block_number = as.numeric(as.character(input_Exp3$block_number))
input_Exp3$prepRT = as.numeric(as.character(input_Exp3$prepRT))
input_Exp3$rt = as.numeric(as.character(input_Exp3$rt))
# add numeric equivalent for correct variable; correct = TRUE = 1, correct = FALSE = 0
input_Exp3 = input_Exp3 %>%
mutate(acc = correct)
input_Exp3$acc = as.integer(as.logical(input_Exp3$acc))
# filter questionnaire data for the analysis
input_Exp3 = input_Exp3 %>%
filter(block_number <= 96)
# block_type: rename 1 to 50%-image-alone, rename 0 to 100%-image-alone
input_Exp3$block_type[input_Exp3$block_type == "25"] = "25%-image-alone"
input_Exp3$block_type[input_Exp3$block_type == "75"] = "75%-image-alone"
# rename prolific_ID into participant
names(input_Exp3)[1] = "participant"
# demographics
demographics = input_Exp3 %>%
summarise(mean= mean(age),
sd= sd(age),
max = max(age),
min = min(age))
gender = input_Exp3 %>%
filter(block_number == "1") %>%
group_by(gender) %>%
count()
# remove outliers and calculate prepRT depending on condition
prepRT3 = input_Exp3 %>%
filter(prepRT > 100) %>%
filter(prepRT < 20000) %>%
filter(rt > 100) %>%
filter(rt < 3000) %>%
group_by(participant, block_type) %>%
summarise(prepRT = mean(prepRT))
prepRT3_GM = prepRT3 %>%
group_by(block_type) %>%
summarise(
prepRT = mean(prepRT))
kable(prepRT3_GM, caption = "PrepRT depending on condition", digits = 2)
# calculate removed trials in %
#100 - ((100/9984)*9699)
# z transform prepRT
prepRT3_cor = input_Exp3 %>%
filter(prepRT > 100) %>%
filter(prepRT < 20000) %>%
filter(rt > 100) %>%
filter(rt < 3000) %>%
filter(block_type == "75%-image-alone") %>%
group_by(participant) %>%
#mutate(prepRT_z = scale(prepRT, center = TRUE, scale = TRUE)) %>%
summarise(prepRT = mean(prepRT))
# pairwise comparisons including NHST and Bayes t-tests for PrepRT depending on condition
source("pairwise_comparisons.R") #pw
prepRT3_wide = prepRT3 %>%
dcast(participant ~ block_type, value.var = "prepRT")
prepRT3_wide_pw = TES(prepRT3_wide$`75%-image-alone`, prepRT3_wide$`25%-image-alone`, paired=TRUE)
row.names(prepRT3_wide_pw) = c('PrepRT')
kable(prepRT3_wide_pw, caption = "Paired-samples t-test on PrepRT", digits = 2)
# plot prepRT
level_order = c('75%-image-alone', '25%-image-alone')
plot_PrepRT3 = ggplot(prepRT3, aes(x = factor(block_type, level = level_order), y = prepRT)) +
geom_line(aes(group = participant), colour = "grey") +
geom_point() +
geom_boxplot(colour = "black", fill="grey", alpha = 0, width=0.1) +
scale_y_continuous(breaks = c(2000,4000,6000,8000,10000,12000,14000), limits = c(2000,14000)) +
stat_summary(fun.prepRT=mean, colour = "red", geom="line", aes(group=1))  +
stat_summary(fun.prepRT=mean, colour = "red", geom="point") +
stat_summary(fun.data = mean_cl_normal, colour = "red", width = 0.1, geom = "errorbar") +
xlab("Condition") +
ylab("Preparation RT (ms)") +
ggtitle("Preparation depending on condition") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(face = "plain", size = 14)) +
theme(axis.text = element_text(size = 14, color = "black")) +
theme(axis.title.x = element_text(face = "plain", size = 14)) +
theme(axis.title.x = element_text(margin = margin(t = 16, r = 0, b = 0, l = 00))) +
theme(axis.title.y = element_text(face = "plain", size = 14)) +
theme(axis.title.y = element_text(margin = margin(t = 0, r = 16, b = 0, l = 0))) +
theme(axis.ticks = element_line(size = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_PrepRT3
#ggsave("plot_PrepRT3.png", width = 24, height = 16, units = "cm")
p_TIPI = table(TIPI_Exp3$participant)
p_TIPI
TIPI_Exp3$resp = as.numeric(as.character(TIPI_Exp3$resp))
# reverse code TIPI question 2
TIPI_Exp3_q1 = TIPI_Exp3 %>%
filter(qnumber == 1) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
TIPI_Exp3_q2 = TIPI_Exp3 %>%
filter(qnumber == 2) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 8 - resp)
TIPI_Exp3_new = rbind(TIPI_Exp3_q1, TIPI_Exp3_q2)
# calculate TIPI score (the average of both items)
TIPI_scores = TIPI_Exp3_new %>%
group_by(participant) %>%
summarise(TIPI_score = mean(resp_r))
# combine TIPI score and prepRT
prepRT3_cor$TIPI_score = TIPI_scores$TIPI_score
p_BHI = table(BHI_Exp3$participant)
p_BHI
BHI_Exp3$resp = as.numeric(as.character(BHI_Exp3$resp))
# reverse code BHI questions 2 and 4
BHI_Q1 = BHI_Exp3 %>%
filter(qnumber == 1) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
BHI_Q2 = BHI_Exp3 %>%
filter(qnumber == 2) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 6 - resp)
BHI_Q3 = BHI_Exp3 %>%
filter(qnumber == 3) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = resp)
BHI_Q4 = BHI_Exp3 %>%
filter(qnumber == 4) %>%
mutate(resp_r = 99) %>%
mutate(resp_r = 6 - resp)
BHI_Exp3_new = rbind(BHI_Q1, BHI_Q2, BHI_Q3, BHI_Q4)
# calculate BHI score (the average of all items)
BHI_scores = BHI_Exp3_new %>%
group_by(participant) %>%
summarise(BHI_score = mean(resp_r))
# combine BHI score and prepRT
prepRT3_cor$BHI_score = BHI_scores$BHI_score
# save as csv
write.csv(prepRT3_cor, 'Exp3_prepRT_TIPI_BHI', row.names = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(afex)
library(BayesFactor)
library(car)
library(cowplot)
library(DataCombine)
library(data.table)
library(extrafont)
library(ez)
library(ggpubr)
library(gridExtra)
library(knitr)
library(PerformanceAnalytics)
library(tidyverse)
# clear directory
rm(list=ls())
### UPPSP
# load data
Exp0 <- read_csv("../../Data/Raw/Exp0_prepRT_UPPSP")
Exp1a <- read_csv("../../Data/Raw/Exp1a_prepRT_UPPSP")
Exp1b <- read_csv("../../Data/Raw/Exp1b_prepRT_UPPSP")
Exp2 <- read_csv("../../Data/Raw/Exp2_prepRT_UPPSP")
Exp3 <- read_csv("../../Data/Raw/Exp3_prepRT_UPPSP")
# add Experiment
Exp0$participant <- sub("^", "Exp0_", Exp0$participant )
Exp1a$participant <- sub("^", "Exp1a_", Exp1a$participant )
Exp1b$participant <- sub("^", "Exp1b_", Exp1b$participant )
Exp2$participant <- sub("^", "Exp2_", Exp2$participant )
Exp3$participant <- sub("^", "Exp3_", Exp3$participant )
# combine data in one big file
UPPSP_all <- rbind(Exp0, Exp1a, Exp1b, Exp2, Exp3)
### TIPI and BHI
# load data
Exp2_ <- read_csv("../../Data/Raw/Exp2_prepRT_TIPI_BHI")
Exp3_ <- read_csv("../../Data/Raw/Exp3_prepRT_TIPI_BHI")
# add Experiment
Exp2_$participant <- sub("^", "Exp2_", Exp2_$participant )
Exp3_$participant <- sub("^", "Exp3_", Exp3_$participant )
# combine data in one big file
TIPI_BHI_all <- rbind(Exp2_, Exp3_)
View(TIPI_BHI_all)
View(UPPSP_all)
# use the chart.Correlation() function to get an overview of all correlations
TIPI_prepRT <- TIPI_BHI_all %>%
select(prepRT, TIPI_score)
PerformanceAnalytics::chart.Correlation(
TIPI_prepRT,
histogram = T,
method = "pearson"
)
prepRT_TIPI = cor.test(TIPI_BHI_all$prepRT, TIPI_BHI_all$TIPI_score, method = "pearson")
prepRT_TIPI
# use the chart.Correlation() function to get an overview of all correlations
TIPI_prepRT <- TIPI_BHI_all %>%
select(prepRT, TIPI_score)
PerformanceAnalytics::chart.Correlation(
TIPI_prepRT,
histogram = T,
method = "pearson"
)
# prepRT and TIPI
prepRT_TIPI = cor.test(TIPI_BHI_all$prepRT, TIPI_BHI_all$TIPI_score, method = "pearson")
prepRT_TIPI
# use the chart.Correlation() function to get an overview of all correlations
BHI_prepRT <- TIPI_BHI_all %>%
select(prepRT, BHI_score)
PerformanceAnalytics::chart.Correlation(
BHI_prepRT,
histogram = T,
method = "pearson"
)
# prepRT and TIPI
prepRT_BHI = cor.test(TIPI_BHI_all$prepRT, TIPI_BHI_all$BHI_score, method = "pearson")
prepRT_BHI
prepRT_BHI = cor.test(TIPI_BHI_all$prepRT, TIPI_BHI_all$BHI_score, method = "pearson")
prepRT_BHI
View(TIPI_BHI_all)
