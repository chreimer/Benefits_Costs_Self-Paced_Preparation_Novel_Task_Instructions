filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation) %>%
summarise(prepRT = mean(rt)) %>%
mutate(age_group = "4-19")
prepRT_pairsplit_GM = prepRT_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(
prepRT = mean(prepRT))
kable(prepRT_pairsplit_GM, caption = "PrepRT for fast vs slow preparation", digits = 2)
# calculate removed trials in %
#100 - ((100/9744*8772))
# calculate mean ACC depending on pair-split
ACC_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation) %>%
summarise(ACC = mean(acc_go1)) %>%
mutate(age_group = "4-19")
ACC_pairsplit_GM = ACC_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(
ACC = mean(ACC))
kable(ACC_pairsplit_GM, caption = "ACC depending on fast vs slow preparation", digits = 2)
# paired-samples t-test
source("pairwise_comparisons.R")
ACC_pairsplit_wide = ACC_pairsplit %>%
dcast(participant ~fasterPreparation, value.var = "ACC") %>%
DropNA()
ACC_pairsplit_pw = TES(ACC_pairsplit_wide$`FALSE`, ACC_pairsplit_wide$`TRUE`, paired=TRUE)
row.names(ACC_pairsplit_pw) = c('ACC')
kable(ACC_pairsplit_pw, caption = "Paired-samples t-test on ACC", digits = 2)
# table ACC
ACC_pairsplit_table = ACC_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(mean.ACC = mean(ACC, na.rm = TRUE),
sd.ACC = sd(ACC, na.rm = TRUE),
n.ACC = n()) %>%
mutate(se.ACC = sd.ACC / sqrt(n.ACC),
lower.ci.ACC = mean.ACC - qt(1 - (0.05 / 2), n.ACC - 1) * se.ACC,
upper.ci.ACC = mean.ACC + qt(1 - (0.05 / 2), n.ACC - 1) * se.ACC)
kable(ACC_pairsplit_table, caption = "ACC depending on fast vs slow preparation", digits = 2)
# calculate mean exeRT depending on pair-split
RT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
filter(acc_go1 == "1") %>%
group_by(participant, fasterPreparation) %>%
summarise(RT = mean(rt_go1)) %>%
mutate(age_group = "4-19")
RT_pairsplit_GM = RT_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(
RT = mean(RT))
kable(RT_pairsplit_GM, caption = "ExeRT depending on fast vs slow preparation", digits = 2)
# calculate removed trials in %
#100 - ((100/8772*7515))
# paired-samples t-test
source("pairwise_comparisons.R")
RT_pairsplit_wide = RT_pairsplit %>%
dcast(participant ~fasterPreparation, value.var = "RT") %>%
DropNA()
RT_pairsplit_pw = TES(RT_pairsplit_wide$`FALSE`, RT_pairsplit_wide$`TRUE`, paired=TRUE)
row.names(RT_pairsplit_pw) = c('RT')
kable(RT_pairsplit_pw, caption = "Paired-samples t-test on exeRT", digits = 2)
# check: each participant should have equal number of faster and slower blocks
table(input_Kidsn_pairsplit$participant, input_Kidsn_pairsplit$fasterPreparation)
knitr::opts_chunk$set(echo = FALSE)
library(afex)
library(BayesFactor)
library(car)
library(cowplot)
library(DataCombine)
library(data.table)
library(extrafont)
library(ez)
library(ggpubr)
library(gridExtra)
library(knitr)
library(tidyverse)
# clear directory
rm(list=ls())
# open files and add participant number
input_Kids = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "UTM_NextChild2_*")
for (i in files) {
tmp <- read.delim(file = file.path("../../Data/Raw/", i))
tmp$participant = i
# add the files to the data frame
input_Kids = rbind (input_Kids, tmp)
rm(tmp)
}
# convert some factor variables to numeric variables
input_Kids$block = as.numeric(as.character(input_Kids$block))
input_Kids$rt = as.numeric(as.character(input_Kids$rt))
# remove participants who could not do the experiment
input_Kids = input_Kids %>%
filter(participant != "UTM_NextChild2_139_nr1.txt") %>%
filter(participant != "UTM_NextChild2_142_nr2.txt") %>%
filter(participant != "UTM_NextChild2_143_nr1.txt") %>%
filter(participant != "UTM_NextChild2_149_nr1.txt") %>%
filter(participant != "UTM_NextChild2_166_nr2.txt")
#participantNO = table(input_Kids$participant)
#participantNO
# filter practice part, next phase and go2 trials for the analysis
# in other words, keep only mapping/instruction phase and the first go trial for the analysis
input_Kids = input_Kids %>%
filter(part == "exp") %>%
filter(phase == "map" | phase == "go1")
# reformat the data, so that mapping/instruction phase and go1 trial are in one line
input_Kids = input_Kids %>%
mutate(rt_go1 = lead(rt)) %>%
mutate(acc_go1 = lead(correct))
# remove rows with phase = go1, so that there is only one row per trial
input_Kidsn = input_Kids %>%
filter(phase == "map")
input_Kidsn_pairsplit = input_Kidsn %>%
arrange(participant, block) %>%
mutate(pair = ceiling(block/2)) %>% # create pair number based on block number; block 1 and 2 will be pair 1, etc.
group_by(participant, pair) %>%
mutate(n_block_in_pair = n(), # count number of blocks in a pair; due to missing data, some 'pair's have only one block
Pair_PrepRT = mean(rt), # calculate the mean prepRT of each pair
fasterPreparation = (rt < Pair_PrepRT), # determine whether each block is the one with shorter prepRT in the pair
diff = rt - Pair_PrepRT) %>% # calculate the difference between raw prepRT and the average of each pair
filter(n_block_in_pair == 2, # select only pairs that have two blocks
diff != 0) # select pairs where the prepRT of the two blocks differ
# check: each participant should have equal number of faster and slower blocks
table(input_Kidsn_pairsplit$participant, input_Kidsn_pairsplit$fasterPreparation)
# calculate mean prepRT depending on pair-split
prepRT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation) %>%
summarise(prepRT = mean(rt)) %>%
mutate(age_group = "4-19")
prepRT_pairsplit_GM = prepRT_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(
prepRT = mean(prepRT))
kable(prepRT_pairsplit_GM, caption = "PrepRT for fast vs slow preparation", digits = 2)
# calculate removed trials in %
#100 - ((100/9744*8772))
# calculate mean ACC depending on pair-split
ACC_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation) %>%
summarise(ACC = mean(acc_go1)) %>%
mutate(age_group = "4-19")
ACC_pairsplit_GM = ACC_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(
ACC = mean(ACC))
kable(ACC_pairsplit_GM, caption = "ACC depending on fast vs slow preparation", digits = 2)
# paired-samples t-test
source("pairwise_comparisons.R")
ACC_pairsplit_wide = ACC_pairsplit %>%
dcast(participant ~fasterPreparation, value.var = "ACC") %>%
DropNA()
ACC_pairsplit_pw = TES(ACC_pairsplit_wide$`FALSE`, ACC_pairsplit_wide$`TRUE`, paired=TRUE)
row.names(ACC_pairsplit_pw) = c('ACC')
kable(ACC_pairsplit_pw, caption = "Paired-samples t-test on ACC", digits = 2)
# table ACC
ACC_pairsplit_table = ACC_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(mean.ACC = mean(ACC, na.rm = TRUE),
sd.ACC = sd(ACC, na.rm = TRUE),
n.ACC = n()) %>%
mutate(se.ACC = sd.ACC / sqrt(n.ACC),
lower.ci.ACC = mean.ACC - qt(1 - (0.05 / 2), n.ACC - 1) * se.ACC,
upper.ci.ACC = mean.ACC + qt(1 - (0.05 / 2), n.ACC - 1) * se.ACC)
kable(ACC_pairsplit_table, caption = "ACC depending on fast vs slow preparation", digits = 2)
# calculate mean exeRT depending on pair-split
RT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
filter(acc_go1 == "1") %>%
group_by(participant, fasterPreparation) %>%
summarise(RT = mean(rt_go1)) %>%
mutate(age_group = "4-19")
RT_pairsplit_GM = RT_pairsplit %>%
group_by(fasterPreparation) %>%
summarise(
RT = mean(RT))
kable(RT_pairsplit_GM, caption = "ExeRT depending on fast vs slow preparation", digits = 2)
# calculate removed trials in %
#100 - ((100/8772*7515))
# paired-samples t-test
source("pairwise_comparisons.R")
RT_pairsplit_wide = RT_pairsplit %>%
dcast(participant ~fasterPreparation, value.var = "RT") %>%
DropNA()
RT_pairsplit_pw = TES(RT_pairsplit_wide$`FALSE`, RT_pairsplit_wide$`TRUE`, paired=TRUE)
row.names(RT_pairsplit_pw) = c('RT')
kable(RT_pairsplit_pw, caption = "Paired-samples t-test on exeRT", digits = 2)
table(input_Kidsn_pairsplit$fasterPreparation)
prepRT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000
View(prepRT_pairsplit)
View(prepRT_pairsplit)
table(input_Kidsn_pairsplit$fasterPreparation)
prepRT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000)
prepRT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation) %>%
summarise(prepRT = mean(rt)) %>%
mutate(age_group = "4-19")
View(prepRT_pairsplit)
table(input_Kidsn_pairsplit$participant, input_Kidsn_pairsplit$fasterPreparation)
table(input_Kidsn_pairsplit$fasterPreparation)
prepRT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation)
View(prepRT_pairsplit)
prepRT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation) %>%
summarise(prepRT = mean(rt))
View(prepRT_pairsplit)
table(input_Kidsn_pairsplit$participant, input_Kidsn_pairsplit$fasterPreparation)
table(input_Kidsn_pairsplit$fasterPreparation)
table(input_Kidsn_pairsplit$fasterPreparation)
knitr::opts_chunk$set(echo = FALSE)
library(afex)
library(BayesFactor)
library(car)
library(cowplot)
library(DataCombine)
library(data.table)
library(extrafont)
library(ez)
library(ggpubr)
library(gridExtra)
library(knitr)
library(tidyverse)
# clear directory
rm(list=ls())
# open files and add participant number
input_Kids = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "UTM_NextChild2_*")
for (i in files) {
tmp <- read.delim(file = file.path("../../Data/Raw/", i))
tmp$participant = i
# add the files to the data frame
input_Kids = rbind (input_Kids, tmp)
rm(tmp)
}
# convert some factor variables to numeric variables
input_Kids$block = as.numeric(as.character(input_Kids$block))
input_Kids$rt = as.numeric(as.character(input_Kids$rt))
# remove participants who could not do the experiment
input_Kids = input_Kids %>%
filter(participant != "UTM_NextChild2_139_nr1.txt") %>%
filter(participant != "UTM_NextChild2_142_nr2.txt") %>%
filter(participant != "UTM_NextChild2_143_nr1.txt") %>%
filter(participant != "UTM_NextChild2_149_nr1.txt") %>%
filter(participant != "UTM_NextChild2_166_nr2.txt")
#participantNO = table(input_Kids$participant)
#participantNO
# filter practice part, next phase and go2 trials for the analysis
# in other words, keep only mapping/instruction phase and the first go trial for the analysis
input_Kids = input_Kids %>%
filter(part == "exp") %>%
filter(phase == "map" | phase == "go1")
# reformat the data, so that mapping/instruction phase and go1 trial are in one line
input_Kids = input_Kids %>%
mutate(rt_go1 = lead(rt)) %>%
mutate(acc_go1 = lead(correct))
# remove rows with phase = go1, so that there is only one row per trial
input_Kidsn = input_Kids %>%
filter(phase == "map")
input_Kidsn_pairsplit = input_Kidsn %>%
arrange(participant, block) %>%
mutate(pair = ceiling(block/2)) %>% # create pair number based on block number; block 1 and 2 will be pair 1, etc.
group_by(participant, pair) %>%
mutate(n_block_in_pair = n(), # count number of blocks in a pair; due to missing data, some 'pair's have only one block
Pair_PrepRT = mean(rt), # calculate the mean prepRT of each pair
fasterPreparation = (rt < Pair_PrepRT), # determine whether each block is the one with shorter prepRT in the pair
diff = rt - Pair_PrepRT) %>% # calculate the difference between raw prepRT and the average of each pair
filter(n_block_in_pair == 2, # select only pairs that have two blocks
diff != 0) # select pairs where the prepRT of the two blocks differ
# check: each participant should have equal number of faster and slower blocks
table(input_Kidsn_pairsplit$participant, input_Kidsn_pairsplit$fasterPreparation)
table(input_Kidsn_pairsplit$fasterPreparation)
knitr::opts_chunk$set(echo = FALSE)
library(afex)
library(BayesFactor)
library(car)
library(cowplot)
library(DataCombine)
library(data.table)
library(extrafont)
library(ez)
library(ggpubr)
library(gridExtra)
library(knitr)
library(tidyverse)
# clear directory
rm(list=ls())
# open files and add participant number
input_Kids = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "UTM_NextChild2_*")
for (i in files) {
tmp <- read.delim(file = file.path("../../Data/Raw/", i))
tmp$participant = i
# add the files to the data frame
input_Kids = rbind (input_Kids, tmp)
rm(tmp)
}
# convert some factor variables to numeric variables
input_Kids$block = as.numeric(as.character(input_Kids$block))
input_Kids$rt = as.numeric(as.character(input_Kids$rt))
# remove participants who could not do the experiment
input_Kids = input_Kids %>%
filter(participant != "UTM_NextChild2_139_nr1.txt") %>%
filter(participant != "UTM_NextChild2_142_nr2.txt") %>%
filter(participant != "UTM_NextChild2_143_nr1.txt") %>%
filter(participant != "UTM_NextChild2_149_nr1.txt") %>%
filter(participant != "UTM_NextChild2_166_nr2.txt")
#participantNO = table(input_Kids$participant)
#participantNO
# filter practice part, next phase and go2 trials for the analysis
# in other words, keep only mapping/instruction phase and the first go trial for the analysis
input_Kids = input_Kids %>%
filter(part == "exp") %>%
filter(phase == "map" | phase == "go1")
# reformat the data, so that mapping/instruction phase and go1 trial are in one line
input_Kids = input_Kids %>%
mutate(rt_go1 = lead(rt)) %>%
mutate(acc_go1 = lead(correct))
# remove rows with phase = go1, so that there is only one row per trial
input_Kidsn = input_Kids %>%
filter(phase == "map")
input_Kidsn_pairsplit = input_Kidsn %>%
arrange(participant, block) %>%
mutate(pair = ceiling(block/2)) %>% # create pair number based on block number; block 1 and 2 will be pair 1, etc.
group_by(participant, pair) %>%
mutate(n_block_in_pair = n(), # count number of blocks in a pair; due to missing data, some 'pair's have only one block
Pair_PrepRT = mean(rt), # calculate the mean prepRT of each pair
fasterPreparation = (rt < Pair_PrepRT), # determine whether each block is the one with shorter prepRT in the pair
diff = rt - Pair_PrepRT) %>% # calculate the difference between raw prepRT and the average of each pair
filter(n_block_in_pair == 2, # select only pairs that have two blocks
diff != 0) # select pairs where the prepRT of the two blocks differ
# check: each participant should have equal number of faster and slower blocks
table(input_Kidsn_pairsplit$participant, input_Kidsn_pairsplit$fasterPreparation)
table(input_Kidsn_pairsplit$fasterPreparation)
178+30
208-12
knitr::opts_chunk$set(echo = FALSE)
library(afex)
library(BayesFactor)
library(car)
library(cowplot)
library(DataCombine)
library(data.table)
library(extrafont)
library(ez)
library(ggpubr)
library(gridExtra)
library(knitr)
library(tidyverse)
# clear directory
rm(list=ls())
# open files and add participant number
input_Kids = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "UTM_NextChild2_*")
for (i in files) {
tmp <- read.delim(file = file.path("../../Data/Raw/", i))
tmp$participant = i
# add the files to the data frame
input_Kids = rbind (input_Kids, tmp)
rm(tmp)
}
# convert some factor variables to numeric variables
input_Kids$block = as.numeric(as.character(input_Kids$block))
input_Kids$rt = as.numeric(as.character(input_Kids$rt))
# remove participants who could not do the experiment
input_Kids = input_Kids %>%
filter(participant != "UTM_NextChild2_139_nr1.txt") %>%
filter(participant != "UTM_NextChild2_142_nr2.txt") %>%
filter(participant != "UTM_NextChild2_143_nr1.txt") %>%
filter(participant != "UTM_NextChild2_149_nr1.txt") %>%
filter(participant != "UTM_NextChild2_166_nr2.txt")
participantNO = table(input_Kids$participant)
participantNO
# filter practice part, next phase and go2 trials for the analysis
# in other words, keep only mapping/instruction phase and the first go trial for the analysis
input_Kids = input_Kids %>%
filter(part == "exp") %>%
filter(phase == "map" | phase == "go1")
# reformat the data, so that mapping/instruction phase and go1 trial are in one line
input_Kids = input_Kids %>%
mutate(rt_go1 = lead(rt)) %>%
mutate(acc_go1 = lead(correct))
# remove rows with phase = go1, so that there is only one row per trial
input_Kidsn = input_Kids %>%
filter(phase == "map")
View(input_Kids)
# clear directory
rm(list=ls())
# open files and add participant number
input_Kids = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "UTM_NextChild2_*")
for (i in files) {
tmp <- read.delim(file = file.path("../../Data/Raw/", i))
tmp$participant = i
# add the files to the data frame
input_Kids = rbind (input_Kids, tmp)
rm(tmp)
}
# convert some factor variables to numeric variables
input_Kids$block = as.numeric(as.character(input_Kids$block))
input_Kids$rt = as.numeric(as.character(input_Kids$rt))
# remove participants who could not do the experiment
input_Kids = input_Kids %>%
filter(participant != "UTM_NextChild2_139_nr1.txt") %>%
filter(participant != "UTM_NextChild2_142_nr2.txt") %>%
filter(participant != "UTM_NextChild2_143_nr1.txt") %>%
filter(participant != "UTM_NextChild2_149_nr1.txt") %>%
filter(participant != "UTM_NextChild2_166_nr2.txt")
participantNO = table(input_Kids$block)
participantNO
participantNO = table(input_Kids$block, table$participant)
participantNO = table(input_Kids$block, input_Kids$participant)
participantNO
participantNO = input_Kids %>%
filter(block == 1) %>%
count()
View(participantNO)
# clear directory
rm(list=ls())
# open files and add participant number
input_Kids = data.frame()
files <- dir(path = "../../Data/Raw", pattern = "UTM_NextChild2_*")
for (i in files) {
tmp <- read.delim(file = file.path("../../Data/Raw/", i))
tmp$participant = i
# add the files to the data frame
input_Kids = rbind (input_Kids, tmp)
rm(tmp)
}
# convert some factor variables to numeric variables
input_Kids$block = as.numeric(as.character(input_Kids$block))
input_Kids$rt = as.numeric(as.character(input_Kids$rt))
# remove participants who could not do the experiment
input_Kids = input_Kids %>%
filter(participant != "UTM_NextChild2_139_nr1.txt") %>%
filter(participant != "UTM_NextChild2_142_nr2.txt") %>%
filter(participant != "UTM_NextChild2_143_nr1.txt") %>%
filter(participant != "UTM_NextChild2_149_nr1.txt") %>%
filter(participant != "UTM_NextChild2_166_nr2.txt")
# filter practice part, next phase and go2 trials for the analysis
# in other words, keep only mapping/instruction phase and the first go trial for the analysis
input_Kids = input_Kids %>%
filter(part == "exp") %>%
filter(phase == "map" | phase == "go1")
# reformat the data, so that mapping/instruction phase and go1 trial are in one line
input_Kids = input_Kids %>%
mutate(rt_go1 = lead(rt)) %>%
mutate(acc_go1 = lead(correct))
# remove rows with phase = go1, so that there is only one row per trial
input_Kidsn = input_Kids %>%
filter(phase == "map")
participantNO = input_Kids %>%
filter(block == 1) %>%
count()
View(participantNO)
input_Kidsn_pairsplit = input_Kidsn %>%
arrange(participant, block) %>%
mutate(pair = ceiling(block/2)) %>% # create pair number based on block number; block 1 and 2 will be pair 1, etc.
group_by(participant, pair) %>%
mutate(n_block_in_pair = n(), # count number of blocks in a pair; due to missing data, some 'pair's have only one block
Pair_PrepRT = mean(rt), # calculate the mean prepRT of each pair
fasterPreparation = (rt < Pair_PrepRT), # determine whether each block is the one with shorter prepRT in the pair
diff = rt - Pair_PrepRT) %>% # calculate the difference between raw prepRT and the average of each pair
filter(n_block_in_pair == 2, # select only pairs that have two blocks
diff != 0) # select pairs where the prepRT of the two blocks differ
prepRT_pairsplit = input_Kidsn_pairsplit %>%
filter(rt > 100) %>%
filter(rt < 10000) %>%
filter(rt_go1 > 100) %>%
filter(rt_go1 < 10000) %>%
group_by(participant, fasterPreparation) %>%
summarise(prepRT = mean(rt)) %>%
mutate(age_group = "4-19")
View(prepRT_pairsplit)
405/2
